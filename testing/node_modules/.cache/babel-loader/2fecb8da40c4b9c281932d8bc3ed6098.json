{"ast":null,"code":"// Generated by CoffeeScript 2.5.1\n// # Stream Transformer\n// Pass all elements of an array or a stream to transform, filter and add. Features include:   \n// *   Extends the Node.js \"stream.Transform\" API.   \n// *   Both synchrounous and asynchronous support based and user callback \n//     arguments signature.   \n// *   Ability to skip records.   \n// *   Sequential and concurrent execution using the \"parallel\" options.\n// Please look at the [README], the [samples] and the [tests] for additional\n// information.\nvar Transformer, clone, stream, util;\nstream = require('stream');\nutil = require('util');\n({\n  clone\n} = require('mixme')); // ## Usage\n// Callback approach, for ease of use:   \n// `transform(records, [options], handler, callback)`     \n// Stream API, for maximum of power:   \n// `transform([records], [options], handler, [callback])`   \n\nmodule.exports = function () {\n  var argument, callback, error, handler, i, j, len, options, records, result, transform, type;\n  options = {};\n\n  for (i = j = 0, len = arguments.length; j < len; i = ++j) {\n    argument = arguments[i];\n    type = typeof argument;\n\n    if (argument === null) {\n      type = 'null';\n    } else if (type === 'object' && Array.isArray(argument)) {\n      type = 'array';\n    }\n\n    if (type === 'array') {\n      records = argument;\n    } else if (type === 'object') {\n      options = clone(argument);\n    } else if (type === 'function') {\n      if (handler && i === arguments.length - 1) {\n        callback = argument;\n      } else {\n        handler = argument;\n      }\n    } else if (type !== 'null') {\n      throw new Error(`Invalid Arguments: got ${JSON.stringify(argument)} at position ${i}`);\n    }\n  }\n\n  transform = new Transformer(options, handler);\n  error = false;\n\n  if (records) {\n    setImmediate(function () {\n      var k, len1, record;\n\n      for (k = 0, len1 = records.length; k < len1; k++) {\n        record = records[k];\n\n        if (error) {\n          break;\n        }\n\n        transform.write(record);\n      }\n\n      return transform.end();\n    });\n  }\n\n  if (callback || options.consume) {\n    result = [];\n    transform.on('readable', function () {\n      var record, results;\n      results = [];\n\n      while (record = transform.read()) {\n        if (callback) {\n          results.push(result.push(record));\n        } else {\n          results.push(void 0);\n        }\n      }\n\n      return results;\n    });\n    transform.on('error', function (err) {\n      error = true;\n\n      if (callback) {\n        return callback(err);\n      }\n    });\n    transform.on('end', function () {\n      if (callback && !error) {\n        return callback(null, result);\n      }\n    });\n  }\n\n  return transform;\n}; // ## Transformer\n// Options are documented [here](http://csv.js.org/transform/options/).\n\n\nTransformer = function () {\n  let options1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let handler1 = arguments.length > 1 ? arguments[1] : undefined;\n  var base, base1;\n  this.options = options1;\n  this.handler = handler1;\n\n  if ((base = this.options).consume == null) {\n    base.consume = false;\n  }\n\n  this.options.objectMode = true;\n\n  if ((base1 = this.options).parallel == null) {\n    base1.parallel = 100;\n  }\n\n  stream.Transform.call(this, this.options);\n  this.state = {\n    running: 0,\n    started: 0,\n    finished: 0\n  };\n  return this;\n};\n\nutil.inherits(Transformer, stream.Transform);\nmodule.exports.Transformer = Transformer;\n\nTransformer.prototype._transform = function (chunk, encoding, cb) {\n  var _this = this;\n\n  var callback, err, l;\n  this.state.started++;\n  this.state.running++;\n\n  if (this.state.running < this.options.parallel) {\n    cb();\n    cb = null;\n  }\n\n  try {\n    l = this.handler.length;\n\n    if (this.options.params != null) {\n      l--;\n    }\n\n    if (l === 1) {\n      // sync\n      this.__done(null, [this.handler.call(this, chunk, this.options.params)], cb);\n    } else if (l === 2) {\n      // async\n      callback = function (err) {\n        for (var _len = arguments.length, chunks = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          chunks[_key - 1] = arguments[_key];\n        }\n\n        return _this.__done(err, chunks, cb);\n      };\n\n      this.handler.call(this, chunk, callback, this.options.params);\n    } else {\n      throw Error(\"Invalid handler arguments\");\n    }\n\n    return false;\n  } catch (error1) {\n    err = error1;\n    return this.__done(err);\n  }\n};\n\nTransformer.prototype._flush = function (cb) {\n  this._ending = function () {\n    if (this.state.running === 0) {\n      this._ending = undefined;\n      return cb();\n    }\n  };\n\n  return this._ending();\n};\n\nTransformer.prototype.__done = function (err, chunks, cb) {\n  var chunk, j, len;\n  this.state.running--;\n\n  if (err) {\n    return this.emit('error', err);\n  }\n\n  this.state.finished++;\n\n  for (j = 0, len = chunks.length; j < len; j++) {\n    chunk = chunks[j];\n\n    if (typeof chunk === 'number') {\n      chunk = `${chunk}`;\n    }\n\n    if (chunk != null && chunk !== '') {\n      // We dont push empty string\n      // See https://nodejs.org/api/stream.html#stream_readable_push\n      this.push(chunk);\n    }\n  }\n\n  if (cb) {\n    cb();\n  }\n\n  if (this._ending) {\n    return this._ending();\n  }\n}; // [readme]: https://github.com/wdavidw/node-stream-transform\n// [samples]: https://github.com/wdavidw/node-stream-transform/tree/master/samples\n// [tests]: https://github.com/wdavidw/node-stream-transform/tree/master/test","map":{"version":3,"names":["Transformer","clone","stream","util","require","module","exports","argument","callback","error","handler","i","j","len","options","records","result","transform","type","arguments","length","Array","isArray","Error","JSON","stringify","setImmediate","k","len1","record","write","end","consume","on","results","read","push","err","options1","handler1","base","base1","objectMode","parallel","Transform","call","state","running","started","finished","inherits","prototype","_transform","chunk","encoding","cb","l","params","__done","chunks","error1","_flush","_ending","undefined","emit"],"sources":["/Users/waiwai/Desktop/Github/Einstein/testing/node_modules/async-csv/node_modules/stream-transform/lib/index.js"],"sourcesContent":["// Generated by CoffeeScript 2.5.1\n// # Stream Transformer\n\n// Pass all elements of an array or a stream to transform, filter and add. Features include:   \n\n// *   Extends the Node.js \"stream.Transform\" API.   \n// *   Both synchrounous and asynchronous support based and user callback \n//     arguments signature.   \n// *   Ability to skip records.   \n// *   Sequential and concurrent execution using the \"parallel\" options.\n\n// Please look at the [README], the [samples] and the [tests] for additional\n// information.\nvar Transformer, clone, stream, util;\n\nstream = require('stream');\n\nutil = require('util');\n\n({clone} = require('mixme'));\n\n// ## Usage\n\n// Callback approach, for ease of use:   \n\n// `transform(records, [options], handler, callback)`     \n\n// Stream API, for maximum of power:   \n\n// `transform([records], [options], handler, [callback])`   \nmodule.exports = function() {\n  var argument, callback, error, handler, i, j, len, options, records, result, transform, type;\n  options = {};\n  for (i = j = 0, len = arguments.length; j < len; i = ++j) {\n    argument = arguments[i];\n    type = typeof argument;\n    if (argument === null) {\n      type = 'null';\n    } else if (type === 'object' && Array.isArray(argument)) {\n      type = 'array';\n    }\n    if (type === 'array') {\n      records = argument;\n    } else if (type === 'object') {\n      options = clone(argument);\n    } else if (type === 'function') {\n      if (handler && i === arguments.length - 1) {\n        callback = argument;\n      } else {\n        handler = argument;\n      }\n    } else if (type !== 'null') {\n      throw new Error(`Invalid Arguments: got ${JSON.stringify(argument)} at position ${i}`);\n    }\n  }\n  transform = new Transformer(options, handler);\n  error = false;\n  if (records) {\n    setImmediate(function() {\n      var k, len1, record;\n      for (k = 0, len1 = records.length; k < len1; k++) {\n        record = records[k];\n        if (error) {\n          break;\n        }\n        transform.write(record);\n      }\n      return transform.end();\n    });\n  }\n  if (callback || options.consume) {\n    result = [];\n    transform.on('readable', function() {\n      var record, results;\n      results = [];\n      while ((record = transform.read())) {\n        if (callback) {\n          results.push(result.push(record));\n        } else {\n          results.push(void 0);\n        }\n      }\n      return results;\n    });\n    transform.on('error', function(err) {\n      error = true;\n      if (callback) {\n        return callback(err);\n      }\n    });\n    transform.on('end', function() {\n      if (callback && !error) {\n        return callback(null, result);\n      }\n    });\n  }\n  return transform;\n};\n\n// ## Transformer\n\n// Options are documented [here](http://csv.js.org/transform/options/).\nTransformer = function(options1 = {}, handler1) {\n  var base, base1;\n  this.options = options1;\n  this.handler = handler1;\n  if ((base = this.options).consume == null) {\n    base.consume = false;\n  }\n  this.options.objectMode = true;\n  if ((base1 = this.options).parallel == null) {\n    base1.parallel = 100;\n  }\n  stream.Transform.call(this, this.options);\n  this.state = {\n    running: 0,\n    started: 0,\n    finished: 0\n  };\n  return this;\n};\n\nutil.inherits(Transformer, stream.Transform);\n\nmodule.exports.Transformer = Transformer;\n\nTransformer.prototype._transform = function(chunk, encoding, cb) {\n  var callback, err, l;\n  this.state.started++;\n  this.state.running++;\n  if (this.state.running < this.options.parallel) {\n    cb();\n    cb = null;\n  }\n  try {\n    l = this.handler.length;\n    if (this.options.params != null) {\n      l--;\n    }\n    if (l === 1) { // sync\n      this.__done(null, [this.handler.call(this, chunk, this.options.params)], cb);\n    } else if (l === 2) { // async\n      callback = (err, ...chunks) => {\n        return this.__done(err, chunks, cb);\n      };\n      this.handler.call(this, chunk, callback, this.options.params);\n    } else {\n      throw Error(\"Invalid handler arguments\");\n    }\n    return false;\n  } catch (error1) {\n    err = error1;\n    return this.__done(err);\n  }\n};\n\nTransformer.prototype._flush = function(cb) {\n  this._ending = function() {\n    if (this.state.running === 0) {\n      this._ending = undefined\n      return cb();\n    }\n  };\n  return this._ending();\n};\n\nTransformer.prototype.__done = function(err, chunks, cb) {\n  var chunk, j, len;\n  this.state.running--;\n  if (err) {\n    return this.emit('error', err);\n  }\n  this.state.finished++;\n  for (j = 0, len = chunks.length; j < len; j++) {\n    chunk = chunks[j];\n    if (typeof chunk === 'number') {\n      chunk = `${chunk}`;\n    }\n    if ((chunk != null) && chunk !== '') {\n      // We dont push empty string\n      // See https://nodejs.org/api/stream.html#stream_readable_push\n      this.push(chunk);\n    }\n  }\n  if (cb) {\n    cb();\n  }\n  if (this._ending) {\n    return this._ending();\n  }\n};\n\n// [readme]: https://github.com/wdavidw/node-stream-transform\n// [samples]: https://github.com/wdavidw/node-stream-transform/tree/master/samples\n// [tests]: https://github.com/wdavidw/node-stream-transform/tree/master/test\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}