{"ast":null,"code":"var e = require(\"convert-css-length\"),\n    n = require(\"parse-unit\"),\n    t = function (e) {\n  return n(e)[1];\n},\n    i = function (e) {\n  return n(e)[0];\n},\n    r = {\n  baseFontSize: \"16px\",\n  baseLineHeight: 1.5,\n  rhythmUnit: \"rem\",\n  defaultRhythmBorderWidth: \"1px\",\n  defaultRhythmBorderStyle: \"solid\",\n  roundToNearestHalfLine: !0,\n  minLinePadding: \"2px\"\n},\n    a = function (n, t) {\n  var r,\n      a = e(t.baseFontSize),\n      o = i(a(n, \"px\")),\n      s = i(t.baseLineHeightInPx),\n      u = i(a(t.minLinePadding, \"px\"));\n  return (r = t.roundToNearestHalfLine ? Math.ceil(2 * o / s) / 2 : Math.ceil(o / s)) * s - o < 2 * u && (r += t.roundToNearestHalfLine ? .5 : 1), r;\n},\n    o = function (n) {\n  var r = e(n.baseFontSize);\n  return function (e, a, o) {\n    null == e && (e = 1), null == a && (a = n.baseFontSize), null == o && (o = 0);\n    var s = e * i(n.baseLineHeightInPx) - o + \"px\",\n        u = r(s, n.rhythmUnit, a);\n    return \"px\" === t(u) && (u = Math.floor(i(u)) + t(u)), parseFloat(i(u).toFixed(5)) + t(u);\n  };\n};\n\nmodule.exports = function (n) {\n  var s = JSON.parse(JSON.stringify(r)),\n      u = Object.assign({}, s, n),\n      h = e(u.baseFontSize);\n\n  if (t(u.baseLineHeight)) {\n    i(h(u.baseFontSize, \"px\"));\n    u.baseLineHeightInPx = h(u.baseLineHeight, \"px\");\n  } else u.baseLineHeightInPx = i(u.baseFontSize) * u.baseLineHeight + \"px\";\n\n  return {\n    rhythm: o(u),\n    establishBaseline: function () {\n      return function (n) {\n        e(n.baseFontSize);\n        return {\n          fontSize: i(n.baseFontSize) / 16 * 100 + \"%\",\n          lineHeight: n.baseLineHeight.toString()\n        };\n      }(u);\n    },\n    linesForFontSize: function (e) {\n      return a(e, u);\n    },\n    adjustFontSizeTo: function (n, r, s) {\n      return null == r && (r = \"auto\"), function (n, r, s, u) {\n        null == s && (s = u.baseFontSize), \"%\" === t(n) && (n = i(u.baseFontSize) * (i(n) / 100) + \"px\");\n        var h = e(u.baseFontSize);\n        n = h(n, \"px\", s = h(s, \"px\"));\n        var l = o(u);\n        return \"auto\" === r && (r = a(n, u)), {\n          fontSize: h(n, u.rhythmUnit, s),\n          lineHeight: l(r, s)\n        };\n      }(n, r, s, u);\n    }\n  };\n};","map":{"version":3,"mappings":"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","names":["const","convertLength","require","parseUnit","unit","length","unitLess","defaults","baseFontSize","baseLineHeight","rhythmUnit","defaultRhythmBorderWidth","defaultRhythmBorderStyle","roundToNearestHalfLine","minLinePadding","linesForFontSize","fontSize","options","let","lines","convert","fontSizeInPx","lineHeightInPx","baseLineHeightInPx","Math","ceil","rhythm","offset","rhythmLength","floor","parseFloat","toFixed","module","exports","defaultsCopy","JSON","parse","stringify","mergedOptions","Object","establishBaseline","lineHeight","toString","adjustFontSizeTo","toSize","fromSize","r"],"sources":["/Users/waiwai/Desktop/Github/Einstein/tutorial/node_modules/compass-vertical-rhythm/src/index.js"],"sourcesContent":["const convertLength = require(\"convert-css-length\")\nconst parseUnit = require(\"parse-unit\")\n\nconst unit = length => parseUnit(length)[1]\n\nconst unitLess = length => parseUnit(length)[0]\n\nconst defaults = {\n  baseFontSize: \"16px\",\n  baseLineHeight: 1.5,\n  rhythmUnit: \"rem\",\n  defaultRhythmBorderWidth: \"1px\",\n  defaultRhythmBorderStyle: \"solid\",\n  roundToNearestHalfLine: true,\n  minLinePadding: \"2px\",\n}\n\nconst linesForFontSize = function(fontSize, options) {\n  let lines\n  const convert = convertLength(options.baseFontSize)\n  const fontSizeInPx = unitLess(convert(fontSize, \"px\"))\n  const lineHeightInPx = unitLess(options.baseLineHeightInPx)\n  const minLinePadding = unitLess(convert(options.minLinePadding, \"px\"))\n\n  if (options.roundToNearestHalfLine) {\n    lines = Math.ceil(2 * fontSizeInPx / lineHeightInPx) / 2\n  } else {\n    lines = Math.ceil(fontSizeInPx / lineHeightInPx)\n  }\n\n  // If lines are cramped, include some extra lead.\n  if (lines * lineHeightInPx - fontSizeInPx < minLinePadding * 2) {\n    if (options.roundToNearestHalfLine) {\n      lines += 0.5\n    } else {\n      lines += 1\n    }\n  }\n\n  return lines\n}\n\nconst rhythm = function(options) {\n  const convert = convertLength(options.baseFontSize)\n\n  return function(lines, fontSize, offset) {\n    if (lines == null) {\n      lines = 1\n    }\n    if (fontSize == null) {\n      fontSize = options.baseFontSize\n    }\n    if (offset == null) {\n      offset = 0\n    }\n    const length = lines * unitLess(options.baseLineHeightInPx) - offset + \"px\"\n    let rhythmLength = convert(length, options.rhythmUnit, fontSize)\n    if (unit(rhythmLength) === \"px\") {\n      rhythmLength = Math.floor(unitLess(rhythmLength)) + unit(rhythmLength)\n    }\n\n    // Limit to 5 decimals.\n    return parseFloat(unitLess(rhythmLength).toFixed(5)) + unit(rhythmLength)\n  }\n}\n\nconst establishBaseline = function(options) {\n  const convert = convertLength(options.baseFontSize)\n\n  // Set these values on html in your css.\n  return {\n    // 16px is the default browser font size.\n    // Set base fontsize in percent as older browsers (or just IE6) behave\n    // weird otherwise.\n    fontSize: unitLess(options.baseFontSize) / 16 * 100 + \"%\",\n    lineHeight: options.baseLineHeight.toString(),\n  }\n}\n\nconst adjustFontSizeTo = function(toSize, lines, fromSize, options) {\n  if (fromSize == null) {\n    fromSize = options.baseFontSize\n  }\n\n  if (unit(toSize) === \"%\") {\n    toSize = unitLess(options.baseFontSize) * (unitLess(toSize) / 100) + \"px\"\n  }\n\n  const convert = convertLength(options.baseFontSize)\n  fromSize = convert(fromSize, \"px\")\n  toSize = convert(toSize, \"px\", fromSize)\n  const r = rhythm(options)\n\n  if (lines === \"auto\") {\n    lines = linesForFontSize(toSize, options)\n  }\n\n  return {\n    fontSize: convert(toSize, options.rhythmUnit, fromSize),\n    lineHeight: r(lines, fromSize),\n  }\n}\n\nmodule.exports = function(options) {\n  // Don't override defaults\n  const defaultsCopy = JSON.parse(JSON.stringify(defaults))\n\n  const mergedOptions = { ...defaultsCopy, ...options }\n\n  // Backwards compatability. If baseLineHeight is in pixels, convert to unitless\n  // value. Also set line height in pixels as it's used several places.\n  const convert = convertLength(mergedOptions.baseFontSize)\n  if (unit(mergedOptions.baseLineHeight)) {\n    const fontSizeInPx = unitLess(convert(mergedOptions.baseFontSize, \"px\"))\n    mergedOptions.baseLineHeightInPx = convert(\n      mergedOptions.baseLineHeight,\n      \"px\"\n    )\n  } else {\n    mergedOptions.baseLineHeightInPx = `${unitLess(mergedOptions.baseFontSize) *\n      mergedOptions.baseLineHeight}px`\n  }\n\n  return {\n    rhythm: rhythm(mergedOptions),\n    establishBaseline() {\n      return establishBaseline(mergedOptions)\n    },\n    linesForFontSize(fontSize) {\n      return linesForFontSize(fontSize, mergedOptions)\n    },\n    adjustFontSizeTo(toSize, lines, fromSize) {\n      if (lines == null) {\n        lines = \"auto\"\n      }\n      return adjustFontSizeTo(toSize, lines, fromSize, mergedOptions)\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"script"}