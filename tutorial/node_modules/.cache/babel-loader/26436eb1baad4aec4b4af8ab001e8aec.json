{"ast":null,"code":"var e = require(\"parse-unit\"),\n    r = function (r) {\n  return e(r)[0];\n};\n\nmodule.exports = function (n) {\n  return null == n && (n = n), function (u, i, t, f) {\n    null == t && (t = n), null == f && (f = t);\n\n    var l = function (r) {\n      return e(r)[1];\n    }(u);\n\n    if (l === i) return u;\n    var o = r(u);\n    if (\"px\" !== l) if (\"em\" === l) o = r(u) * r(t);else if (\"rem\" === l) o = r(u) * r(n);else {\n      if (\"ex\" !== l) return u;\n      o = r(u) * r(t) * 2;\n    }\n    var a = o;\n    if (\"px\" !== i) if (\"em\" === i) a = o / r(f);else if (\"rem\" === i) a = o / r(n);else {\n      if (\"ex\" !== i) return u;\n      a = o / r(f) / 2;\n    }\n    return parseFloat(a.toFixed(5)) + i;\n  };\n};","map":{"version":3,"mappings":"AASAA,IAAMC,IAAYC,QAAQ,YAARA,CAAlBF;AAAAA,IAQMG,cAAWC,CAAXD,EAAWC;EAAAA,OAAUH,EAAUG,CAAVH,EAAkB,CAAlBA,CAAVG;AAA4B,CAR7CJ;;AA2BAK,OAAOC,OAAPD,GAAiB,UAASE,CAAT,EAASA;EAIxB,OAHoB,QAAhBA,CAAgB,KAClBA,IAAeA,CADG,GAGb,UAASH,CAAT,EAAiBI,CAAjB,EAAyBC,CAAzB,EAAsCC,CAAtC,EAAsCA;IACxB,QAAfD,CAAe,KACjBA,IAAcF,CADG,GAGF,QAAbG,CAAa,KACfA,IAAYD,CADG,CAHE;;IAMnBT,IAAMW,cAjCGP,CAiCHO,EAjCGP;MAAAA,OAAUH,EAAUG,CAAVH,EAAkB,CAAlBA,CAAVG;IAiCQQ,CAAXD,CAAgBP,CAAhBO,CAANX;;IAGA,IAAIW,MAAaH,CAAjB,EACE,OAAOJ,CAAP;IAIFS,IAAIC,IAAWX,EAASC,CAATD,CAAfU;IAYA,IAAiB,SAAbF,CAAJ,EACE,IAAiB,SAAbA,CAAJ,EACEG,IAAWX,EAASC,CAATD,IAAmBA,EAASM,CAATN,CAA9BW,CADF,KAEO,IAAiB,UAAbH,CAAJ,EACLG,IAAWX,EAASC,CAATD,IAAmBA,EAASI,CAATJ,CAA9BW,CADK,KAEA;MAAA,IAAiB,SAAbH,CAAJ,EAGL,OAAOP,CAAP;MAFAU,IAAWX,EAASC,CAATD,IAAmBA,EAASM,CAATN,CAAnBA,GAA2C,CAAtDW;IAgBJD;IAAAA,IAAIE,IAAeD,CAAnBD;IACA,IAAe,SAAXL,CAAJ,EACE,IAAe,SAAXA,CAAJ,EACEO,IAAeD,IAAWX,EAASO,CAATP,CAA1BY,CADF,KAEO,IAAe,UAAXP,CAAJ,EACLO,IAAeD,IAAWX,EAASI,CAATJ,CAA1BY,CADK,KAEA;MAAA,IAAe,SAAXP,CAAJ,EAUL,OAAOJ,CAAP;MATAW,IAAeD,IAAWX,EAASO,CAATP,CAAXW,GAAiC,CAAhDC;IAaJ;IAAA,OAAOC,WAAWD,EAAaE,OAAbF,CAAqB,CAArBA,CAAXC,IAAsCR,CAA7C;EAA6CA,CArE/C;AAqE+CA,CAzEjDH","names":["const","parseUnit","require","unitLess","length","module","exports","baseFontSize","toUnit","fromContext","toContext","fromUnit","unit","let","pxLength","outputLength","parseFloat","toFixed"],"sources":["/Users/waiwai/Desktop/Github/Einstein/tutorial/node_modules/convert-css-length/src/index.js"],"sourcesContent":["/*\n * decaffeinate suggestions:\n * DS102: Remove unnecessary code created because of implicit returns\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\n// Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n\nconst parseUnit = require(\"parse-unit\")\n\nconst baseFontSize = \"16px\"\n\n// Emulate the sass function \"unit\"\nconst unit = length => parseUnit(length)[1]\n\n// Emulate the sass function \"unitless\"\nconst unitLess = length => parseUnit(length)[0]\n\n// Convert any CSS <length> or <percentage> value to any another.\n//\n// @param length\n//   A css <length> value\n//\n// @param toUnit\n//   String matching a css unit keyword, e.g. 'em', 'rem', etc.\n//\n// @param fromContext\n//   When converting from relative units, the absolute length (in px) to\n//   which length refers (e.g. for lengths in em units, would normally be the\n//   font-size of the current element).\n//\n// @param toContext\n//   For converting to relative units, the absolute length in px to which the\n//   output value will refer. Defaults to the same as fromContext, since it is\n//   rarely needed.\nmodule.exports = function(baseFontSize) {\n  if (baseFontSize == null) {\n    baseFontSize = baseFontSize\n  }\n  return function(length, toUnit, fromContext, toContext) {\n    if (fromContext == null) {\n      fromContext = baseFontSize\n    }\n    if (toContext == null) {\n      toContext = fromContext\n    }\n    const fromUnit = unit(length)\n\n    // Optimize for cases where `from` and `to` units are accidentally the same.\n    if (fromUnit === toUnit) {\n      return length\n    }\n\n    // Convert input length to pixels.\n    let pxLength = unitLess(length)\n\n    // Warn if to or from context aren't in pixels.\n    // if (unit(fromContext) !== \"px\") {\n    // console.warn(`Parameter fromContext must resolve to a value \\\n    // in pixel units.`)\n    // }\n    // if (unit(toContext) !== \"px\") {\n    // console.warn(`Parameter toContext must resolve to a value \\\n    // in pixel units.`)\n    // }\n\n    if (fromUnit !== \"px\") {\n      if (fromUnit === \"em\") {\n        pxLength = unitLess(length) * unitLess(fromContext)\n      } else if (fromUnit === \"rem\") {\n        pxLength = unitLess(length) * unitLess(baseFontSize)\n      } else if (fromUnit === \"ex\") {\n        pxLength = unitLess(length) * unitLess(fromContext) * 2\n      } else {\n        return length\n      }\n      // } else if ([\"ch\", \"vw\", \"vh\", \"vmin\"].includes(fromUnit)) {\n      // console.warn(`${fromUnit} units can't be reliably converted; Returning \\\n      // original value.`)\n      // return length\n      // } else {\n      // console.warn(`${fromUnit} is an unknown or unsupported length unit; \\\n      // Returning original value.`)\n      // return length\n      // }\n    }\n\n    // Convert length in pixels to the output unit\n    let outputLength = pxLength\n    if (toUnit !== \"px\") {\n      if (toUnit === \"em\") {\n        outputLength = pxLength / unitLess(toContext)\n      } else if (toUnit === \"rem\") {\n        outputLength = pxLength / unitLess(baseFontSize)\n      } else if (toUnit === \"ex\") {\n        outputLength = pxLength / unitLess(toContext) / 2\n        // } else if ([\"ch\", \"vw\", \"vh\", \"vmin\"].includes(toUnit)) {\n        // console.warn(`${toUnit} units can't be reliably converted; Returning \\\n        // original value.`)\n        // return length\n        // } else {\n        // console.warn(`${toUnit} is an unknown or unsupported length unit; \\\n        // Returning original value.`)\n      } else {\n        return length\n      }\n    }\n\n    return parseFloat(outputLength.toFixed(5)) + toUnit\n  }\n}\n"]},"metadata":{},"sourceType":"script"}